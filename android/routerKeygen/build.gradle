apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    flavorDimensions 'default'
    project.ext.set('gapps', true)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId 'org.exobel.routerkeygen'
        versionCode 73
        versionName '4.1.7'
        minSdkVersion 16
        targetSdkVersion 27
        multiDexEnabled false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    productFlavors {
        noGapps {
            applicationId 'net.yolosec.routerkeygen2'
            gapps = false
        }
        yolosec2 {
            applicationId 'net.yolosec.routerkeygen2'
            gapps = true
        }
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set libs as .so's location instead of jniLibs
        jni.srcDirs = [] //disable automatic ndk-build call with auto-generated Android.mk
    }
    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd()
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd(), 'clean'
    }
    clean.dependsOn cleanNative
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-XX:MaxPermSize=256m'
        }
    }
    lintOptions {
        abortOnError false
    }
}

task copyResDirectoryToClasses(type: Copy){
    from "${projectDir}/src/main/res"
    into "${buildDir}/intermediates/classes/test/github/debug/res"
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir', null)
    if (ndkDir == null)
        throw new GradleException('NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.')

    return ndkDir
}

def getNdkBuildCmd() {
    def ndkBuild = getNdkDir() + File.separator + 'ndk-build'
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        ndkBuild += '.cmd'
    }

    return ndkBuild
}


dependencies {
    compile project(':aFileChooser')
    implementation 'com.android.support:support-compat:27.0.1'
    implementation 'com.android.support:support-core-ui:27.0.1'
    implementation 'com.android.support:support-core-utils:27.0.1'
    implementation 'com.android.support:support-fragment:27.0.1'

    if (gapps) {
        implementation('com.google.android.gms:play-services-location:11.6.0', {
            exclude module: 'support-v4'
        })
    }

    testImplementation 'junit:junit:4.12'
}
